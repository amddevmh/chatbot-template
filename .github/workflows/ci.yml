
name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Setup MongoDB Atlas CLI
        uses: mongodb/atlas-github-action@v0.2.0
        # This step installs the MongoDB Atlas CLI
      
      - name: Install MongoDB Shell
        run: |
          echo "Installing MongoDB Shell using direct download..."
          # Download the MongoDB Shell binary directly
          wget https://downloads.mongodb.com/compass/mongosh-1.10.6-linux-x64.tgz
          tar -xvf mongosh-1.10.6-linux-x64.tgz
          sudo mv mongosh-1.10.6-linux-x64/bin/mongosh /usr/local/bin/
          mongosh --version
          
      - name: Verify MongoDB Atlas Connection with MongoDB Shell
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: |
          echo "Verifying MongoDB Atlas connection using MongoDB Shell..."
          echo 'db.runCommand({ ping: 1 })' | mongosh "$MONGODB_URI" --quiet
          echo "MongoDB connection successful!"
          
      - name: Verify MongoDB Atlas Connection with Atlas CLI
        shell: bash
        run: |
          echo "Verifying MongoDB Atlas connection with Atlas CLI..."
          # Try to list projects to verify API keys are working
          atlas projects ls --output json || echo "Atlas CLI connection failed, but we can still proceed with MongoDB Shell"
          
      - name: Navigate to backend directory
        run: |
          cd backend
          echo "Current directory: $(pwd)"
          ls -la
          
      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: List files in directory
        working-directory: ./backend
        run: ls -la
          
      - name: Debug environment variables
        working-directory: ./backend
        run: |
          echo "Debugging environment variables..."
          # Safely print first few characters of secrets
          if [ -n "$MONGODB_URI" ]; then
            echo "MONGODB_URI is set and starts with: ${MONGODB_URI:0:15}..."
            # Extract username from URI for additional verification
            # Format: mongodb+srv://username:password@cluster...
            USERNAME=$(echo $MONGODB_URI | sed -n 's/.*\/\/\([^:]*\):.*/\1/p')
            echo "Username in URI appears to be: $USERNAME"
          else
            echo "MONGODB_URI is NOT set!"
          fi
          
          if [ -n "$MONGODB_DATABASE" ]; then
            echo "MONGODB_DATABASE is set to: $MONGODB_DATABASE"
          else
            echo "MONGODB_DATABASE is NOT set!"
          fi
          
          if [ -n "$JWT_SECRET_KEY" ]; then
            echo "JWT_SECRET_KEY is set and has length: ${#JWT_SECRET_KEY}"
          else
            echo "JWT_SECRET_KEY is NOT set!"
          fi
          
          # Print environment name for verification
          echo "ENVIRONMENT is set to: $ENVIRONMENT"
          echo "AUTH_BYPASS_ENABLED is set to: $AUTH_BYPASS_ENABLED"
          
          # Create a test env file with debug info for verification
          echo "Creating debug .env file..."
          cat > app/.env << EOL
          # Debug .env file created by CI
          MONGODB_URI=$MONGODB_URI
          MONGODB_DATABASE=$MONGODB_DATABASE
          JWT_SECRET_KEY=$JWT_SECRET_KEY
          ENVIRONMENT=$ENVIRONMENT
          AUTH_BYPASS_ENABLED=$AUTH_BYPASS_ENABLED
          EOL
          
          echo "Content of app directory:"
          ls -la app/
          echo "First line of .env file (safe to show):"
          head -n 1 app/.env
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          ENVIRONMENT: test
          AUTH_BYPASS_ENABLED: "true"
          
      - name: Run tests with MongoDB Atlas
        working-directory: ./backend
        run: |
          echo "Running tests with MongoDB Atlas"
          # Run database connection test first to verify connectivity
          echo "Testing database connection..."
          python -m pytest tests/test_db_connection.py -v
          
          # Then run all tests
          echo "\nRunning all tests..."
          python -m pytest tests -v
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ENVIRONMENT: test
          AUTH_BYPASS_ENABLED: "true"
          
  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: false
          tags: chatbot-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: app-code
          path: |
            ./backend
            !./backend/venv/
            !.git/
