
name: Backend CI

on:
  push:
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      CI_DEBUG: false # Set to true to enable debug output across the workflow
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ENVIRONMENT: test
      AUTH_BYPASS_ENABLED: "true"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      # MongoDB Shell is used for database connectivity
      
      - name: Install MongoDB Shell
        run: |
          wget https://downloads.mongodb.com/compass/mongosh-1.10.6-linux-x64.tgz
          tar -xvf mongosh-1.10.6-linux-x64.tgz
          sudo mv mongosh-1.10.6-linux-x64/bin/mongosh /usr/local/bin/
          
          if [ "$CI_DEBUG" = "true" ]; then
            mongosh --version
            echo "Debug: Attempting MongoDB connection..."
            echo "Verifying MongoDB Atlas connection using MongoDB Shell..."
          fi
          
          echo 'db.runCommand({ ping: 1 })' | mongosh "$MONGODB_URI" --quiet          
          echo "✅ MongoDB connection successful!"
          
      - name: Navigate to backend directory
        run: |
          if [ "$CI_DEBUG" = "true" ]; then
            echo "Debug: Navigating to backend directory..."
          fi
          
          cd backend
          
          if [ "$CI_DEBUG" = "true" ]; then
            echo "Current directory: $(pwd)"
            ls -la
          fi
          
      - name: Install dependencies
        working-directory: ./backend
        run: |
          if [ "$CI_DEBUG" = "true" ]; then
            echo "Debug: Installing Python dependencies..."
            set -x # Enable command echo for debugging
          fi
          
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: List files in directory
        working-directory: ./backend
        if: env.CI_DEBUG == 'true'
        run: |
          ls -la
          
      - name: Debug environment variables
        if: env.CI_DEBUG == 'true'
        working-directory: ./backend
        run: |
          echo "===== Environment Variables Verification ====="
          
          # Check database connection variables
          if [ -n "$MONGODB_URI" ]; then
            echo "✅ MONGODB_URI is set"
            # Only show protocol and hostname for security, mask credentials
            SAFE_URI=$(echo "$MONGODB_URI" | sed -E 's/(mongodb\+srv:\/\/)[^@]*(@.*)/\1****\2/')
            echo "   URI Pattern: $SAFE_URI"
          else
            echo "❌ MONGODB_URI is NOT set!"
          fi
          
          if [ -n "$MONGODB_DATABASE" ]; then
            echo "✅ MONGODB_DATABASE is set to: $MONGODB_DATABASE"
          else
            echo "❌ MONGODB_DATABASE is NOT set!"
          fi
          
          # Check security variables
          if [ -n "$JWT_SECRET_KEY" ]; then
            echo "✅ JWT_SECRET_KEY is set and has length: ${#JWT_SECRET_KEY}"
          else
            echo "❌ JWT_SECRET_KEY is NOT set!"
          fi
          
          if [ -n "$OPENAI_API_KEY" ]; then
            echo "✅ OPENAI_API_KEY is set and has length: ${#OPENAI_API_KEY}"
          else
            echo "❌ OPENAI_API_KEY is NOT set!"
          fi
          
          # Check environment configuration
          echo "✅ ENVIRONMENT is set to: $ENVIRONMENT"
          echo "✅ AUTH_BYPASS_ENABLED is set to: $AUTH_BYPASS_ENABLED"
          echo "✅ Environment verification complete ✅"
          
      - name: Run tests with MongoDB Atlas
        working-directory: ./backend
        run: |
          # Run database connection test
          python -m pytest tests/test_db_connection.py -v
          
          # Run all other tests
          python -m pytest tests --ignore=tests/test_hello_integration.py -v