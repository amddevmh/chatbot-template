import { jwtDecode } from "jwt-decode";

// This is a development token that will be used during development
// In a real application, this would come from your backend after user login
// This token was generated by the backend's generate_dev_token.py script
const DEV_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZXZfdGVzdF91c2VyIn0.AkJIxSVHaJkCRB653MH0ZgTw00DEczPLOA-MaqUQXgc";

/**
 * Simplified Auth.js configuration for Vite compatibility
 * 
 * This configuration can be easily replaced with a real authentication flow later
 * when migrating to Next.js or adding a full authentication system.
 */
export const authConfig = {
  providers: [
    {
      id: "credentials",
      name: "Credentials",
      type: "credentials",
      credentials: {},
      authorize: async () => {
        // In development, we just return a user with the dev token
        // In production, this would validate credentials against your backend
        return {
          id: "dev_test_user",
          name: "Development User",
          email: "dev@example.com",
          image: "https://avatars.githubusercontent.com/u/1?v=4",
          // Store the token for use in API calls
          token: DEV_TOKEN,
        };
      },
    },
  ],
  callbacks: {
    // Add the token to the JWT
    jwt: async ({ token, user }: any) => {
      if (user) {
        token.user = user;
        token.accessToken = user.token;
      }
      return token;
    },
    // Add the token to the session
    session: async ({ session, token }: any) => {
      session.user = token.user;
      session.accessToken = token.accessToken;
      
      // Decode the token to get user information (in a real app)
      try {
        if (token.accessToken) {
          const decoded = jwtDecode(token.accessToken);
          session.user.id = decoded.sub || "unknown";
          session.expires = new Date(decoded.exp ? decoded.exp * 1000 : Date.now() + 86400000).toISOString();
        }
      } catch (error) {
        console.error("Error decoding token:", error);
      }
      
      return session;
    },
  },
  session: {
    strategy: "jwt",
  },
  pages: {
    signIn: "/login", // This would be used in production
  },
  debug: true,
};

// Export the token for direct use if needed
export const getDevToken = () => DEV_TOKEN;

// Type definitions to enhance TypeScript support
declare global {
  interface Session {
    accessToken?: string;
    user: User;
    expires: string;
  }
  
  interface User {
    id?: string;
    name?: string;
    email?: string;
    image?: string;
    token?: string;
  }
  
  interface JWT {
    accessToken?: string;
    user?: User;
  }
}
